{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/about/about.component.ts","./src/app/components/about/about.component.html","./src/app/components/categories/categories.component.ts","./src/app/components/categories/categories.component.html","./src/app/components/category-drop-down/category-drop-down.component.ts","./src/app/components/category-drop-down/category-drop-down.component.html","./src/app/components/each-category/each-category.component.ts","./src/app/components/each-category/each-category.component.html","./src/app/components/each-post/each-post.component.ts","./src/app/components/each-post/each-post.component.html","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/register/register.component.ts","./src/app/components/register/register.component.html","./src/app/components/wall/wall.component.ts","./src/app/components/wall/wall.component.html","./src/app/components/your-each-applied/your-each-applied.component.ts","./src/app/components/your-each-applied/your-each-applied.component.html","./src/app/components/your-each-post/your-each-post.component.ts","./src/app/components/your-each-post/your-each-post.component.html","./src/app/components/your-posts/your-posts.component.ts","./src/app/components/your-posts/your-posts.component.html","./src/app/services/category.service.ts","./src/app/services/post.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { YourPostsComponent } from './components/your-posts/your-posts.component';\r\nimport { AboutComponent } from './components/about/about.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component:LoginComponent},\r\n  {path: 'register', component:RegisterComponent},\r\n  {path: 'home', component:HomeComponent},\r\n  {path: 'yourposts', component:YourPostsComponent},\r\n  {path: 'about', component:AboutComponent},\r\n\r\n  {path:'**', redirectTo:''}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { User } from './models/user';\r\nimport { UserService } from './services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n/** \r\n * This will component is in charge of every component in the app\r\n */\r\nexport class AppComponent implements OnInit {\r\n  \r\n  user:User;\r\n\r\n  /**\r\n   * This will look and capture the user data found in the cache if there is one\r\n   * @param userService - a user service type dependencies\r\n   */\r\n  constructor(private userService:UserService){\r\n    if(localStorage.getItem('user')){\r\n      this.user = JSON.parse(localStorage.getItem('user'));\r\n    }\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('user')){\r\n      this.user = JSON.parse(localStorage.getItem('user'));\r\n    }\r\n  }\r\n  \r\n}\r\n","<div>\r\n  \r\n  <router-outlet></router-outlet>\r\n\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { YourPostsComponent } from './components/your-posts/your-posts.component';\r\nimport { AboutComponent } from './components/about/about.component';\r\nimport { WallComponent } from './components/wall/wall.component';\r\nimport { EachPostComponent } from './components/each-post/each-post.component';\r\nimport { CategoriesComponent } from './components/categories/categories.component';\r\nimport { EachCategoryComponent } from './components/each-category/each-category.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { YourEachPostComponent } from './components/your-each-post/your-each-post.component';\r\nimport { CategoryDropDownComponent } from './components/category-drop-down/category-drop-down.component';\r\nimport { YourEachAppliedComponent } from './components/your-each-applied/your-each-applied.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    HomeComponent,\r\n    YourPostsComponent,\r\n    AboutComponent,\r\n    WallComponent,\r\n    EachPostComponent,\r\n    CategoriesComponent,\r\n    EachCategoryComponent,\r\n    NavbarComponent,\r\n    YourEachPostComponent,\r\n    CategoryDropDownComponent,\r\n    YourEachAppliedComponent,\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.css']\r\n})\r\n\r\n/**\r\n * This Component is just for a static About html page\r\n * It is all hard coded because it does not provide any type of functionality\r\n * \r\n */\r\nexport class AboutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div>\r\n    <app-navbar></app-navbar>\r\n    <br>\r\n    <div class=\"text-center\">\r\n        <h2>Contributors:</h2>\r\n    </div>\r\n    <br>\r\n    <div id=\"contrib-container\" class = \"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-2\"></div>\r\n            <div id=\"contrib-1\" class=\"col-md-3 justify-content-center\" style=\"margin-bottom: 5%;\">\r\n                <div class=\"row\">\r\n                    <img class=\"img-responsive\" src=\"../../../assets/images/catBat.jpg\" style=\"margin-bottom: 1em; width: 100%\">\r\n                </div>\r\n                <div class=\"row text-center\">\r\n                    <h5 style=\"margin-bottom: 1em;\">Developer: Devon Miller</h5>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-2\"></div>\r\n            <div id=\"contrib-2\" class=\"col-md-3 justify-content-center\" style=\"margin-bottom: 5%;\">\r\n                <div class=\"row\">\r\n                    <img class=\"img-responsive\" src=\"../../../assets/images/catBat.jpg\" style=\"margin-bottom: 1em; width: 100%\">\r\n                </div>\r\n                <div class=\"row text-center\">\r\n                    <h5 style=\"margin-bottom: 1em;\">Developer: Shane Sanborn</h5>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-2\"></div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-2\"></div>\r\n            <div id=\"contrib-1\" class=\"col-md-3 justify-content-center\" style=\"margin-bottom: 5%;\">\r\n                <div class=\"row\">\r\n                    <img class=\"img-responsive\" src=\"../../../assets/images/catBat.jpg\" style=\"margin-bottom: 1em; width: 100%\">\r\n                </div>\r\n                <div class=\"row text-center\">\r\n                    <h5 style=\"margin-bottom: 1em;\">Developer: Shadab Akhtar</h5>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-2\"></div>\r\n            <div id=\"contrib-2\" class=\"col-md-3 justify-content-center\" style=\"margin-bottom: 5%;\">\r\n                <div class=\"row\">\r\n                    <img class=\"img-responsive\" src=\"../../../assets/images/catBat.jpg\" style=\"margin-bottom: 1em; width: 100%\">\r\n                </div>\r\n                <div class=\"row text-center\">\r\n                    <h5 style=\"margin-bottom: 1em;\">Developer: Syed Abidi</h5>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-md-2\"></div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div id=\"about-container\" class = \"container\">\r\n        <div class=\"row\">\r\n            <h3>About Us:</h3>\r\n        </div>\r\n\r\n        <div class=\"row text-center\">\r\n            <p>\r\n                Our team is dedicated to helping out others in an easier pursuit for employment or a career. Our <i>mission</i> is to connect\r\n                the entire workforce onto a one stop site for all careers and employment opportunities. Now, LinkedIn started as a\r\n                small project two for our Revature batch, but it is now a small project two for our Revature batch. It was theorized by\r\n                Shadab Akhtar, but ultimately co-founded by a group of four, <b>Shadab Akhtar</b>, <b>Shane Sanborn</b>, <b>Syed Abidi</b>, and <b>Devon Miller</b>.\r\n            </p>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport { Category } from 'src/app/models/category';\r\nimport { CategoryService } from 'src/app/services/category.service';\r\n\r\n@Component({\r\n  selector: 'app-categories',\r\n  templateUrl: './categories.component.html',\r\n  styleUrls: ['./categories.component.css']\r\n})\r\n\r\n/**\r\n * This component will be used to contain a list of all categories in a checklist\r\n * It will also capture the emitted event from each category when they are checked on or off\r\n * \r\n */\r\nexport class CategoriesComponent implements OnInit {\r\n\r\n  @Output() onToggle: EventEmitter<Category> = new EventEmitter();\r\n  DBCategories:Category[];\r\n  allCategories:Category[];\r\n\r\n  constructor(private categoryService: CategoryService) { }\r\n\r\n  /**\r\n   * This will set the category arrays as new arrays and then populate them by\r\n   * using the category service to grab data from the backend\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n    this.allCategories = [];\r\n    this.DBCategories = [];\r\n\r\n    this.categoryService.getAllCategories().subscribe(c =>{\r\n      this.DBCategories = c;\r\n\r\n      this.setCategories(c);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This will set the allCategories array, which will be used to render each category \r\n   * @param cat - an array of type category\r\n   * \r\n   */\r\n  setCategories(cat:Category[]){\r\n    for(let c of cat ){\r\n      this.allCategories.push({\r\n        id:c.id,\r\n        title:c.title,\r\n        toggle:false\r\n      })\r\n  }\r\n  }\r\n\r\n  /**\r\n   * This will be triggered when a category is checked and emits that event up to this component\r\n   * It will emit the event up to the home component to handle\r\n   * \r\n   * @param category - a category that has just been checked or unchecked\r\n   */\r\n  onToggleEvent(category: Category){\r\n    console.log(category);\r\n    this.onToggle.emit(category);\r\n  }\r\n\r\n}\r\n","<div class=\"text-center\">\r\n    <h4><strong>Filter By Category:</strong></h4>\r\n    <app-each-category \r\n    *ngFor=\"let category of allCategories\" \r\n    [category] = \"category\"\r\n    (onToggleEvent) = \"onToggleEvent($event)\"\r\n    >\r\n    \r\n    </app-each-category>\r\n    </div>\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { Category } from 'src/app/models/category';\r\nimport { CategoryService } from 'src/app/services/category.service';\r\n\r\n@Component({\r\n  selector: 'app-category-drop-down',\r\n  templateUrl: './category-drop-down.component.html',\r\n  styleUrls: ['./category-drop-down.component.css']\r\n})\r\n\r\n/**\r\n * This component creates and handles the functionality of a drop down that contains all the categories\r\n * \r\n */\r\nexport class CategoryDropDownComponent implements OnInit {\r\n\r\n  allCategories:Category[];\r\n  @Output() onChangeEvent: EventEmitter<Category> = new EventEmitter();\r\n\r\n  constructor(private categoryService:CategoryService) { }\r\n\r\n  /**\r\n   * when this is created, it will populate the allCategories array with all the categories it \r\n   * recieves from the category service\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n    this.categoryService.getAllCategories().subscribe(c=>{\r\n      this.setCategories(c);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This will set the allCategories array\r\n   * @param c - a category type array\r\n   * \r\n   */\r\n  setCategories(c:Category[]){\r\n    this.allCategories = c;\r\n  }\r\n\r\n  /**\r\n   * This captures when the drop down selected category has changed\r\n   * It will find out which category was selected and then emit the event up\r\n   * @param event - the event of changing the selected category in the drop down\r\n   * \r\n   */\r\n  onChange(event: any){\r\n    console.log(event.target.value);\r\n    this.categoryService.getAllCategories().subscribe(c=>{\r\n      let allCats:Category[] = c;\r\n      for(let cat of allCats){\r\n        if(event.target.value === cat.title){\r\n          this.onChangeEvent.emit(cat);\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<select (change)=\"onChange($event)\" name=\"categories\" id=\"categories\">\r\n    <option\r\n    *ngFor=\"let category of allCategories\"\r\n    [category] = category>\r\n    {{ category.title }}\r\n    </option>\r\n</select>\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { Category } from '../../models/category';\r\nimport { CategoryService } from '../../services/category.service';\r\n\r\n@Component({\r\n  selector: 'app-each-category',\r\n  templateUrl: './each-category.component.html',\r\n  styleUrls: ['./each-category.component.css']\r\n})\r\n\r\n/**\r\n * This component holds used to hold one category and create a checkbox type input with it\r\n */\r\nexport class EachCategoryComponent implements OnInit {\r\n\r\n  @Input() category:Category;\r\n  @Output() onToggleEvent: EventEmitter<Category> = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * This function gets called when a the checkbox is changed\r\n   * It will change the toggle property of the category then emit the category up\r\n   * @param category - the category that just got unchecked or checked\r\n   * \r\n   */\r\n  onToggle(category){\r\n    category.toggle = !category.toggle;\r\n    console.log(category);\r\n    this.onToggleEvent.emit(category);\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"form-check checkbox-teal mb-2\">\r\n    <input (click) = \"onToggle(category)\" type=\"checkbox\" class=\"form-check-input\">\r\n    <label class=\"form-check-label\">{{ category.title }}</label>\r\n</div>\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Post } from 'src/app/models/post';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\n\r\n@Component({\r\n  selector: 'app-each-post',\r\n  templateUrl: './each-post.component.html',\r\n  styleUrls: ['./each-post.component.css']\r\n})\r\n/**\r\n * This holds each post and is in charge of dealing with when a user applys\r\n * \r\n */\r\nexport class EachPostComponent implements OnInit {\r\n\r\n  @Input() post:Post;\r\n  @Output() onToggleEvent: EventEmitter<Post> = new EventEmitter();\r\n  user:User;\r\n\r\n  constructor(private userService:UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    console.log(this.post);\r\n    this.userService.getPosterByPost(this.post).subscribe(u=>{\r\n      this.user = u;\r\n      console.log(this.user);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This function gets called when a user applys to a post\r\n   * It sends the request to the backend using the user service and then captures the new user data\r\n   * @param post - the post the user just applied to\r\n   * \r\n   */\r\n  onApply(post:Post){\r\n    console.log(\"applying\");\r\n    this.userService.applyToPost(post).subscribe(u=>{\r\n      localStorage.setItem('user', JSON.stringify(u));\r\n      console.log(u);\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n            <div class= \"border border-secondary\" style=\"padding: 5%; margin-bottom: 2em;\">\r\n                    <div class=\"text-center\">\r\n                        <div class=\"row\">\r\n                            <p style=\"word-wrap: break-word;\"><b>{{ user.firstName }} {{user.lastName }} posted:</b></p>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                            <p style=\"word-wrap: break-word;\">{{ post.desc }}</p>\r\n                        </div>\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                                <p>Category: {{ post.postCat.title }}</p>\r\n                            </div>\r\n                        </div>\r\n                    \r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                            <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"onApply(post)\">Apply to Job!</button>\r\n                        </div>\r\n                    </div>\r\n                \r\n                    </div>\r\n            </div>\r\n        </div>\r\n\r\n</div>\r\n","import { Component, OnInit, Input, Output } from '@angular/core';\r\nimport { Category } from 'src/app/models/category';\r\nimport { Post } from 'src/app/models/post';\r\nimport { PostService } from 'src/app/services/post.service';\r\nimport { OuterSubscriber } from 'rxjs/internal/OuterSubscriber';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\n/**\r\n * This component is used to contain all components that are inside the home html page\r\n */\r\nexport class HomeComponent implements OnInit {\r\n\r\n  allPosts:Post[];\r\n  showPosts:Post[];\r\n\r\n  @Output() filterCategories:Category[];\r\n  @Input() category: Category;\r\n\r\n  /**\r\n   * It sets the filterCategories array to a run sized array with a defualt category\r\n   * @param postService \r\n   */\r\n  constructor(private postService:PostService) { \r\n    this.filterCategories = [{\r\n      id:0,\r\n      title:'init',\r\n      toggle:false\r\n    }]\r\n  }\r\n\r\n  /**\r\n   * when created this components caprues all posts in the database using the post service\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n    this.postService.getAllPosts().subscribe(p=>{\r\n      this.allPosts = p;\r\n      this.filterPosts();\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This function is run when the categories component emits a category up to here\r\n   * It will push or remove teh category from the filterCategories depending on if\r\n   * the toggle property is true or false\r\n   * @param category - the category that was just selected or unselected\r\n   */\r\n  onToggle(category:Category){\r\n    if(category.toggle){\r\n      this.filterCategories.push(category);\r\n      console.log(\"if\");\r\n    }\r\n    else{\r\n      const index = this.filterCategories.indexOf(category, 0);\r\n      if (index > -1) {\r\n       this.filterCategories.splice(index, 1);\r\n       console.log(\"splice\");\r\n      }\r\n      console.log(\"else\");\r\n    }\r\n\r\n    console.log(this.filterCategories);\r\n    console.log(category);\r\n\r\n    this.filterPosts();\r\n    \r\n  }\r\n\r\n  /**\r\n   * This function filters the posts to only show the posts of the catgories selected\r\n   */\r\n  filterPosts(){\r\n    this.showPosts = [];\r\n\r\n    for(let p of this.allPosts){\r\n      if(this.filterCategories.includes(p.postCat)){\r\n        this.showPosts.push(p);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","<div>\r\n        <app-navbar></app-navbar>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <app-wall\r\n            [filterCategories] = \"filterCategories\"\r\n            >\r\n\r\n            </app-wall>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <app-categories\r\n            (onToggle) = \"onToggle($event)\"\r\n            >\r\n            \r\n            </app-categories>\r\n        </div>\r\n    </div>\r\n</div>>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport {UserService} from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n/**\r\n * This will be used to handle the log in functionality of the log in page\r\n */\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n  returnUrl: string;\r\n\r\n\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  /**\r\n   * It will check if their is a user in the cache, if not it will stay on the page,\r\n   * if there is one it will navigate to the home page\r\n   */\r\n  ngOnInit(): void {\r\n    if(localStorage.getItem('user')){\r\n      this.router.navigateByUrl('home');\r\n    }\r\n\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n  });\r\n  }\r\n\r\n  get f() { return this.form.controls; }\r\n\r\n  /**\r\n   * This function will run when a user tries to log in\r\n   * It will check the creds the user put in by using the user service\r\n   * If accept it will save the data in the cache and reload the page\r\n   * \r\n   */\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n        return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.userService.getUser(this.f.username.value, this.f.password.value).subscribe(user =>{\r\n\r\n        if(user == null){\r\n            console.log(\"not accepted\");\r\n        }\r\n        else{\r\n            console.log(\"accepted\");\r\n            localStorage.setItem('user',JSON.stringify(user));\r\n            location.reload();\r\n        }\r\n\r\n    });\r\n\r\n\r\n\r\n}\r\n\r\n}\r\n","<div class = \"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-2\"></div>\r\n        <div id=\"contrib-1\" class=\"col-md-8 justify-content-center\" style=\"margin-bottom: 5%;\">\r\n            <img src=\"../../../assets/images/Linkedin-Logo-2011–2019.png\" class=\"img-responsive\" style=\"margin-bottom: 1em; width: 100%\">\r\n        </div>\r\n        <div class=\"col-md-2\"></div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-2\"></div>\r\n        <div class=\"col-md-8\">\r\n            <div class=\"card\">\r\n                <h4 class=\"card-header\">Login</h4>\r\n                <div class=\"card-body\">\r\n                    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"username\">Username</label>\r\n                            <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n                            <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\">Password</label>\r\n                            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                                Login\r\n                            </button>\r\n                            <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-md-2\"></div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\n/**\r\n * This component is used with the navbar html \r\n */\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  /**\r\n   * If the uer clicks the sign out on the navbar, it will remove the user and go to the log in page\r\n   */\r\n  logOut(){\r\n    localStorage.removeItem('user');\r\n    this.router.navigateByUrl('');\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n    <a class=\"navbar-brand\" routerLink=\"/\">LinkedIn</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarText\">\r\n      <ul class=\"navbar-nav mr-auto\">\r\n        <li class=\"nav-item active\">\r\n          <a class=\"nav-link\" routerLink=\"/home\">Home <span class=\"sr-only\">(current)</span></a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" routerLink=\"/yourposts\">Your Posts</a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" routerLink=\"/about\">About</a>\r\n        </li>\r\n      </ul>\r\n      <span class=\"navbar-text\">\r\n        <a class=\"nav-link\" routerLink=\"/\" (click)=logOut()>Sign Out</a>\r\n      </span>\r\n    </div>\r\n</nav>\r\n\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\n/**\r\n * This component is used to handle all functionality of the register page\r\n */\r\nexport class RegisterComponent implements OnInit {\r\n  form: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  /**\r\n   * This just sets the validations for the form, so it can be used later\r\n   */\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      username: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n  });\r\n  }\r\n\r\n  get f() { return this.form.controls; }\r\n\r\n  /**\r\n   * This will be called when a user tries to create an account\r\n   * It will check if the form is valid, then use the user service to check\r\n   * if there is a user with the desired username, if there is not it will take the\r\n   * user to the log in page and create the account, if there is it will not create\r\n   * the user and stay on this page\r\n   */\r\n  onSubmit(){\r\n\r\n    this.submitted = true;\r\n\r\n    if (this.form.invalid) {\r\n      return;\r\n  }\r\n  this.loading = true;\r\n\r\n  let formData: any = {\r\n  first_name: this.form.get('firstName').value,\r\n  last_name: this.form.get('lastName').value,\r\n  username: this.form.get('username').value,\r\n  password: this.form.get('password').value\r\n  };\r\n\r\n  this.userService.register(formData).subscribe(u =>{\r\n      if(u == null){\r\n        console.log(\"not accepted\");\r\n      }\r\n      else{\r\n        console.log(\"added user\");\r\n        this.router.navigateByUrl('');\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<div class = \"container\">\r\n<div class=\"row\">\r\n    <div class=\"col-md-2\"></div>\r\n    <div id=\"contrib-1\" class=\"col-md-8 justify-content-center\" style=\"margin-bottom: 2%;\">\r\n        <img src=\"../../../assets/images/Linkedin-Logo-2011–2019.png\" class=\"img-responsive\" style=\"margin-bottom: 1em; width: 100%\">\r\n    </div>\r\n    <div class=\"col-md-2\"></div>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-md-2\"></div>\r\n    <div class=\"col-md-8\">\r\n<div class=\"card\">\r\n    <h4 class=\"card-header\">Register</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group\">\r\n                <label for=\"firstName\">First Name</label>\r\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"lastName\">Last Name</label>\r\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\r\n                <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"username\">Username</label>\r\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                    <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Register\r\n                </button>\r\n                <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n</div>\r\n<div class=\"col-md-2\"></div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, DoCheck } from '@angular/core';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { Post } from 'src/app/models/post';\r\nimport { Category } from 'src/app/models/category';\r\nimport { PostService } from 'src/app/services/post.service';\r\nimport { CategoryService } from 'src/app/services/category.service';\r\n\r\n@Component({\r\n  selector: 'app-wall',\r\n  templateUrl: './wall.component.html',\r\n  styleUrls: ['./wall.component.css']\r\n})\r\n/**\r\n * This component is in charge of the components and functionality\r\n * of the full wall page\r\n * \r\n */\r\nexport class WallComponent implements OnInit, DoCheck{\r\n\r\n  @Input() filterCategories:Category[];\r\n  @Input() showPosts:Post[];\r\n  selectedCategory:Category;\r\n  lengthCheck:number;\r\n  allPosts:Post[];\r\n\r\n  constructor(private userService: UserService,\r\n    private postService: PostService,\r\n    private categoryService:CategoryService) { }\r\n  \r\n  \r\n    /**\r\n     * This will check if the filterCategories has changed, if so it will \r\n     * filter the posts based on the categories inside the filterCategories array\r\n     * It will then change the lengthCheck to the length of the filterCategories\r\n     * \r\n     */\r\n    ngDoCheck(): void {\r\n\r\n      console.log(\"changes\");\r\n      console.log(this.filterCategories.length);\r\n    if(this.lengthCheck !== this.filterCategories.length){\r\n      this.showPosts = [];\r\n      console.log(\"changes if\");\r\n        for(let post of this.allPosts){\r\n          let postCat = {\r\n            id: post.postCat.id,\r\n            title: post.postCat.title,\r\n            toggle: true\r\n          }\r\n\r\n          post.postCat = postCat;\r\n          for(let c of this.filterCategories){\r\n            console.log(c.id);\r\n            console.log(post.postCat.id);\r\n            if(post.postCat.id === c.id){\r\n              this.showPosts.push(post);\r\n              console.log(this.showPosts);\r\n            }\r\n          }\r\n        }\r\n        this.lengthCheck = this.filterCategories.length;\r\n    }\r\n\r\n    if(this.filterCategories.length === 1){\r\n      this.showPosts = this.allPosts;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This will set the selectedCategory as the Developer category \r\n   * Then get all the posts and capture them from the post service\r\n   */\r\n  ngOnInit(): void {\r\n    this.showPosts = [];\r\n\r\n    this.selectedCategory = {\r\n      id:1,\r\n      title:\"Developer\",\r\n      toggle:false\r\n    }\r\n\r\n    this.lengthCheck = this.filterCategories.length;\r\n\r\n    console.log(this.filterCategories.length);\r\n    \r\n    this.postService.getAllPosts().subscribe(p =>{\r\n        this.allPosts = p;\r\n        this.showPosts = p;\r\n      });\r\n    \r\n\r\n    \r\n\r\n  }\r\n\r\n  /**\r\n   * This will run when a user tries to add a post\r\n   * It will capture the category and content of the post\r\n   * Then it will add the post to the database by using\r\n   * the user service and capture the new user data\r\n   * @param content \r\n   * \r\n   */\r\n  addPost(content){\r\n    this.categoryService.getAllCategories().subscribe(c =>{\r\n      let allCategories:Category[] = c;\r\n      for(let cat of allCategories){\r\n        if(cat.title === this.selectedCategory.title){\r\n          let post:Post = {\r\n            id:0,\r\n            desc: content.value,\r\n            postCat: cat\r\n          }\r\n          this.userService.addPost(post).subscribe(u=>{\r\n            localStorage.setItem('user', JSON.stringify(u));\r\n            this.postService.getAllPosts().subscribe(p=>{\r\n              this.allPosts = p;\r\n            })\r\n            \r\n          })\r\n        }\r\n      }\r\n    })\r\n   }\r\n\r\n   /**\r\n    * This will run when the user changes the category in the drop down\r\n    * It will set the selectedCategory as that new category\r\n    * @param c - the category that was just selected\r\n    */\r\n   onChangeEvent(c:Category){\r\n      this.selectedCategory = c;\r\n      \r\n   }\r\n\r\n\r\n\r\n  \r\n\r\n}\r\n","<div class=\"text-center\">\r\n    <div class=\"container\">\r\n        <h4>Add New Job Post:</h4>\r\n        <form>\r\n            <div class=\"form-group\">\r\n                \r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                        <label for=\"category_name\">New Job Category</label>\r\n                    </div>\r\n                    \r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                        <app-category-drop-down\r\n                        (onChangeEvent) = \"onChangeEvent($event)\"\r\n                        >\r\n\r\n                        </app-category-drop-down>\r\n                    </div>\r\n                    </div>\r\n                \r\n          \r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"content\">New Job Content</label>\r\n                <input type=\"text\" name=\"content\" class=\"form-control\"maxlength = \"300\" placeholder=\"Create a new job here\" #content>\r\n            </div>\r\n            <button type=\"button\" (click) =\"addPost(content)\" class=\"btn btn-primary\">Create</button>\r\n        </form>\r\n        <br>\r\n        <h4><strong>Apply to Jobs</strong></h4>\r\n        <app-each-post\r\n        *ngFor=\"let post of showPosts\"\r\n        [post]= \"post\"\r\n        >\r\n        </app-each-post>\r\n    </div>\r\n</div>\r\n    \r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Post } from 'src/app/models/post';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\n\r\n@Component({\r\n  selector: 'app-your-each-applied',\r\n  templateUrl: './your-each-applied.component.html',\r\n  styleUrls: ['./your-each-applied.component.css']\r\n})\r\nexport class YourEachAppliedComponent implements OnInit {\r\n\r\n  @Input() post:Post;\r\n  user:User;\r\n  \r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getPosterByPost(this.post).subscribe(u=>{\r\n      this.user = u;\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This will delete an application to a post for the user\r\n   * @param post - the post the user wants to unapply to\r\n   */\r\n  onDelete(post:Post){\r\n    this.userService.deleteApply(post.id,JSON.parse(localStorage.getItem('user'))).subscribe(u=>{\r\n      localStorage.setItem('user',JSON.stringify(u));\r\n      location.reload();\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n    <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n        <div class= \"border border-secondary\" style=\"padding: 10%; margin-bottom: 2em;\">\r\n            <div class=\"text-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                    <p>Content: {{ post.desc }}</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                    <p><b>posted by {{ user.firstName }} {{user.lastName }}</b></p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"onDelete(post)\">Delete Apply</button>\r\n                    </div>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Post } from 'src/app/models/post';\r\nimport { User } from 'src/app/models/user';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { PostService } from 'src/app/services/post.service';\r\n\r\n@Component({\r\n  selector: 'app-your-each-post',\r\n  templateUrl: './your-each-post.component.html',\r\n  styleUrls: ['./your-each-post.component.css']\r\n})\r\n/**\r\n * This component is in charge of each post of the user \r\n */\r\nexport class YourEachPostComponent implements OnInit {\r\n\r\n  @Input() post:Post;\r\n  user:User;\r\n\r\n  appliedUsers:User[];\r\n  appliedLength:number;\r\n\r\n  constructor(private userService:UserService,\r\n    private postService:PostService) { }\r\n\r\n    /**\r\n     * This captures all of the users thats applied to the post using the user service\r\n     */\r\n  ngOnInit(): void {\r\n    this.userService.getApplyUsersByPost(this.post).subscribe(u=>{\r\n      this.setAppliedUsers(u);\r\n      this.appliedLength = this.appliedUsers.length;\r\n      this.userService.getPosterByPost(this.post).subscribe(u=>{\r\n        this.user = u;\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This runs when the user accepts an applicant of their post\r\n   * It will delete the post from the database using the post service,\r\n   * then capture the new user data in sends back\r\n   * @param post \r\n   */\r\n  onApply(post:Post){\r\n    console.log(\"deleted\");\r\n    if(this.appliedUsers.length !== 0){\r\n    this.postService.deletePost(post).subscribe(p=>{\r\n        console.log(\"deleted\");\r\n        this.userService.getUserById(JSON.parse(localStorage.getItem('user')).id).subscribe(u=>{\r\n            localStorage.setItem('user',JSON.stringify(u));\r\n            location.reload();\r\n        });\r\n      \r\n    })\r\n  }\r\n  }\r\n\r\n  /**\r\n   * This sets the appliedUsers array\r\n   * @param users - an array of type User\r\n   */\r\n  setAppliedUsers(users:User[]){\r\n    this.appliedUsers = users;\r\n    console.log(this.appliedUsers);\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n    <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n        <div class= \"border border-secondary\" style=\"padding: 10%; margin-bottom: 2em;\">\r\n            <div class=\"text-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                    <p>Content: {{ post.desc }}</p>\r\n                    </div>\r\n                </div>\r\n                \r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                        <label for=\"appliedUsers\"><b>Pick an Applicant:</b></label>\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"margin-bottom: 2em;\" class=\"row\">\r\n                        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                        <select name=\"appliedUsers\" id=\"appliedUsers\">\r\n                            <option\r\n                            *ngIf=\"appliedLength == 0\"\r\n                            >none</option>\r\n                            <option\r\n                            *ngFor=\"let applied of appliedUsers\"\r\n                            [applied] = applied>\r\n                            {{ applied.username }}\r\n                            </option>\r\n                        </select>\r\n                        </div>\r\n                    </div>\r\n                        \r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12 col-md-offset-3 text-center\">\r\n                        <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"onApply(post)\">Accept the Applicant</button>\r\n                        </div>\r\n                    </div>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Post } from 'src/app/models/post';\r\nimport { PostService } from 'src/app/services/post.service';\r\n\r\n@Component({\r\n  selector: 'app-your-posts',\r\n  templateUrl: './your-posts.component.html',\r\n  styleUrls: ['./your-posts.component.css']\r\n})\r\n/**\r\n * This component is in charge of the your post page and each post component\r\n * \r\n */\r\nexport class YourPostsComponent implements OnInit {\r\n  posts:Post[];\r\n  appliedPosts:Post[];\r\n\r\n  constructor(private postService:PostService) { }\r\n\r\n  /**\r\n   * This captures all the posts of the user using the post service\r\n   * Also captures all the applied posts of the user\r\n   */\r\n  ngOnInit(): void {\r\n    this.posts = [];\r\n    \r\n    this.postService.getPostsForUser(JSON.parse(localStorage.getItem('user'))).subscribe(p=>{\r\n      this.setPosts(p);\r\n      this.postService.appliedPosts(JSON.parse(localStorage.getItem('user'))).subscribe(a=>{\r\n        this.setAppliedPosts(a);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the appliedPosts array\r\n   * @param a - an array of type Post\r\n   */\r\n  setAppliedPosts(a: Post[]) {\r\n    this.appliedPosts = a;\r\n    console.log(this.appliedPosts);\r\n  }\r\n\r\n  /**\r\n   * This sets the posts array\r\n   * @param posts - an array of type Post\r\n   */\r\n  setPosts(posts:Post[]){\r\n    this.posts = posts;\r\n    console.log(this.posts);\r\n  }\r\n\r\n}\r\n","<div>\r\n    <app-navbar></app-navbar>\r\n    <div class= \"container\">\r\n        <div class=\"row\">\r\n            <div class = \"col-md-6\">\r\n                <div class = \"text-center\">\r\n                    <h3>Your Job Posts</h3>\r\n            <!--     <input name =\"post-title\" [(ngModel)=\"newPost.name\"/> -->\r\n                </div>\r\n                \r\n                <app-your-each-post \r\n                style=\"padding:20px 0px\" \r\n                *ngFor =\"let post of posts\"\r\n                [post] = \"post\">\r\n                </app-your-each-post>\r\n            \r\n            </div>\r\n            <div class =\"col-md-6\">\r\n                <div class = \"text-center\">\r\n                    <h3>Your Applied Posts</h3>\r\n            <!--     <input name =\"post-title\" [(ngModel)=\"newPost.name\"/> -->\r\n                </div>\r\n                <app-your-each-applied \r\n                style=\"padding:20px 0px\" \r\n                *ngFor =\"let post of appliedPosts\"\r\n                [post] = \"post\">\r\n                </app-your-each-applied>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Category } from '../models/category';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/**\r\n * THis is used to get category data from our backend\r\n */\r\nexport class CategoryService {\r\n\r\n  allCategories:Category[];\r\n  dbCategories: any[];\r\n\r\n  allCategoryUrl:string = 'http://localhost:8080/api/categories';\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  /**\r\n   * This is used to get an observable of a category array that holds all categories\r\n   * in our database\r\n   */\r\n  getAllCategories(): Observable<Category[]> {\r\n    return this.http.get<Category[]>(this.allCategoryUrl);\r\n\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Post } from '../models/post';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/**\r\n * This is used to get any post data from our backend\r\n */\r\nexport class PostService {\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  /**\r\n   * This will return an Observable that holds an array of all the posts in our database\r\n   */\r\n  getAllPosts(): Observable<Post[]>{\r\n    return this.http.get<Post[]>(\"http://localhost:8080/api/posts\");\r\n  }\r\n\r\n  /**\r\n   * This will return an observable that holds an array of all the posts of a certain user\r\n   * @param u - the user to get the posts of\r\n   */\r\n  getPostsForUser(u:User): Observable<Post[]>{\r\n    return this.http.get<Post[]>(\"http://localhost:8080/api/posts/poster/\"+u.id);\r\n  }\r\n\r\n  /**\r\n   * This will return an observable that holds a string that will say \"deleted\" if deleted and \"not-deleted\" if it wasn't\r\n   * @param p - the post to delete\r\n   */\r\n  deletePost(p:Post): Observable<string>{\r\n    return this.http.get<string>(\"http://localhost:8080/api/posts/delete/\" + p.id);\r\n  }\r\n\r\n  /**\r\n   * This will return an observable that holds an array of posts that a user applied to\r\n   * @param u - the user to get the applied post of\r\n   */\r\n  appliedPosts(u:User): Observable<Post[]>{\r\n    return this.http.get<Post[]>(\"http://localhost:8080/api/posts/applied/\"+u.username);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User } from '../models/user';\r\nimport { Post } from '../models/post';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json'\r\n  })\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n/**\r\n * This will be used to communicate will our backend to either capture or change data in our database\r\n */\r\nexport class UserService {\r\n\r\n\r\n  private userSubject: BehaviorSubject<User>;\r\n  public user: Observable<User>;\r\n  public realUser:User;\r\n\r\n  constructor(     \r\n    private router: Router,\r\n    private http: HttpClient) { \r\n\r\n    }\r\n\r\n    public get userValue(): User {\r\n      return this.userSubject.value;\r\n  }\r\n\r\n  /**\r\n   * This will return an observable that holds an array of every user in the database\r\n   * \r\n   */\r\n  getAllUsers(){\r\n    return this.http.get<User[]>('http://localhost:8080/api/users');\r\n  }\r\n\r\n  /**\r\n   * This will return an Observable that contains a user model of the specifc user\r\n   * @param username - the ussername of the user\r\n   * @param password - the password of the user\r\n   */\r\ngetUser(username, password):Observable<User>{\r\n    this.user = this.http.get<User>('http://localhost:8080/api/users/checkCreds/' + username +\"/\"+password);\r\n    return this.user;\r\n}\r\nlogout() {\r\n  // remove user from local storage and set current user to null\r\n  localStorage.removeItem('user');\r\n  this.userSubject.next(null);\r\n  this.router.navigate(['']);\r\n}\r\n\r\n/**\r\n * This will return a observable that holds an array of all users that applied to a post\r\n * @param p - the post that this will get the applied users of\r\n */\r\ngetApplyUsersByPost(p:Post):Observable<User[]>{\r\n  return this.http.get<User[]>(\"http://localhost:8080/api/users/appliedUsers/\"+p.id);\r\n}\r\n\r\n/**\r\n * This will create a new user into the database and return an observable that contains that new users data\r\n * @param formData - the form data that holds the username, password, first name, and last name of the new user\r\n */\r\nregister(formData:any): Observable<User> {\r\n  return this.http.post<User>(\"http://localhost:8080/api/users/addNewUser\",formData);\r\n}\r\n\r\n/**\r\n * This will apply a user to a post in our database and return an observable of the updated user data\r\n * @param post - the post the user is applying to\r\n */\r\napplyToPost(post:Post):Observable<User>{\r\n  return this.http.post<User>(\"http://localhost:8080/api/users/\"+JSON.parse(localStorage.getItem('user')).username +\"/apply/\"+post.id,post);\r\n}\r\n\r\n/**\r\n * This will add a post to our database and return an observable that holds the uodated user data\r\n * @param post - the post that is being added\r\n */\r\naddPost(post:Post):Observable<User>{\r\n  console.log(post);\r\n  return this.http.post<User>(\"http://localhost:8080/api/users/addPost/\"+JSON.parse(localStorage.getItem('user')).id,post);\r\n}\r\n\r\n/**\r\n * this will return an observable of the user data associated with the id\r\n * @param id - the id of the user\r\n */\r\ngetUserById(id:number){\r\n  return this.http.get<User>(\"http://localhost:8080/api/users/\"+id);\r\n}\r\n\r\n/**\r\n * This will delete an application to a post for the user in the database and return an observable of the updated user data\r\n * @param p - the id of the post they are unapplying to\r\n * @param u - the user that is unapplying\r\n */\r\ndeleteApply(p:number,u:User): Observable<User>{\r\n  return this.http.get<User>(\"http://localhost:8080/api/users/deleteApply/\"+u.username+\"/\"+p);\r\n}\r\n\r\ngetPosterByPost(p:Post):Observable<User>{\r\n  return this.http.get<User>(\"http://localhost:8080/api/users/poster/\"+p.id);\r\n}\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}